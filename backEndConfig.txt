Step 1:
    Install necessary technologies/dependencies for machine

        -node.js
        -install git(for repository)
        -Create Account for MongoDB.

--------------------------------------------------------------------------------
Actual Processes For Backend Configuration 

1.) Create Cluster and then Database and then collection.
    -navigate to MongoDBAtlas
        -create Cluster 
        -create Database    
        -create collection

2.) Create Folder structure for application:
-client folder (front end of stack)
-server folder (bacn end of stack)

3.) Create JSON for Application:

JSON is an open standard file format and data interchange format that uses human-readable text to store and transmit data objects 
consisting of attributeâ€“value pairs and arrays. It is a common data format with diverse uses in electronic data interchange, including 
that of web applications with servers.

-Open terminal windopw and use the following command to create JSON file

    -CD server
    - npm init -y

    This command will create a package.json file for us, from where we will
        be able to manage our installed packages and also control the version of
        our application. If you want to create the package manually then you need
        to give the command npm init and if you want to create the file as a whole
        then you need to type npm init -y


    4.) Install backend dependencies:

    nodemon = Nodemon is a popular tool that is used for the development of applications based on node. js. It simply restarts the node application whenever it observes the changes in the file present in the working directory of your project

    mongoose = Mongoose is a JavaScript object-oriented programming library that creates a connection between MongoDB and the Node.js JavaScript runtime environment

    express = Express.js, or simply Express, is a back end web application framework for building RESTful APIs with Node.js, released as free and open-source software under the MIT License. It is designed for building web applications and APIs. 

    cors = Cross-origin resource sharing is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served. A web page may freely embed cross-origin images, stylesheets, scripts, iframes, and videos.

5.) Amended package,JSON content:

{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    *****
    "start": "nodemon index.js"  
  },*****
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "mongoose": "^6.7.4",
    "nodemon": "^2.0.20"
  }
}

6.) Creation of server file titled "index.js" inside of server.

*content for 

// set up file to be a server, use API


const express = require('express');
const app = express();
const mongoose = require('mongoose');

//middleware
app.use(express.json());
const cors = require('cors');
app.use(cors());

//establish link to database
mongoose.connect("mongodb+srv://ColbyJackHammer:<Hockey21>@cluster0.goyims4.mongodb.net/ExoticDeralership?retryWrites=true&w=majority"
).then(() => console.log("Connected to database!"))
.then(() =>{ app.listen(3001)
}).catch((err) => console.log(err));

for DB connection

make sure to insert username and password values and database name after / and before ? in connection string. And REMOVE the <>'s

7.) start server to be ran by trunning the following cmd
npm start


8.) Create folder to hold mongoose model(structuring of info)
-create folder called "model" inside the server folder, then create file titled as the same name as your collection (VehicleINFO.js)

content for VehicleINFO.js
const mongoose = require("mongoose");
const Schema = mongoose.Schema;
const carSchema = new Schema({
    make_model:{
        type: String,
        required: true,
    },
    price:{
        type: String,
        required: true,
    }
    year:{
        type: Number,
        required: true,
    }
    engine:{
        type: String,
        required: true,
    }
    inStock:{
        type: Boolean,    
    }    
})

//export schema to be used in other files
module.exports = mongoose.model("VehicleINFO", carSchema)

9.) set up controllers for functionality for URLs

-create folder called controllers
-create file inside for hold controllers


content for file inside of controllers folder inside of server folder

**new terms**

Asynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished. Once that task has finished, your program is presented with the result.

next() The next() method returns an object with two properties done and value . You can also provide a parameter to the next method to send a value to the generator.
